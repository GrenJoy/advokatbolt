import React, { useState, useEffect } from 'react'
import { 
  Send, 
  Bot, 
  User, 
  Paperclip, 
  FileText,
  Brain,
  Zap
} from 'lucide-react'

interface Message {
  id: string
  content: string
  isUser: boolean
  timestamp: string
  context?: string
}

const mockChats = [
  {
    id: '1',
    caseTitle: '–¢—Ä—É–¥–æ–≤–æ–π —Å–ø–æ—Ä –û–û–û "–ê–ª—å—Ñ–∞"',
    caseNumber: 'A40-123456/2024',
    lastMessage: '–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –ø–æ–¥–∞—á–∏ –∏—Å–∫–∞?',
    timestamp: '2024-12-08 14:30',
    messageCount: 5
  },
  {
    id: '2',
    caseTitle: '–†–∞–∑–¥–µ–ª –∏–º—É—â–µ—Å—Ç–≤–∞ –ø—Ä–∏ —Ä–∞–∑–≤–æ–¥–µ',
    caseNumber: '–°-456789/2024',
    lastMessage: '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –¥–µ–ª–∞',
    timestamp: '2024-12-07 16:45',
    messageCount: 8
  },
  {
    id: '3',
    caseTitle: '–í–∑—ã—Å–∫–∞–Ω–∏–µ –¥–æ–ª–≥–∞ –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É',
    caseNumber: '–ì-789012/2024',
    lastMessage: '–ù–∞–π–¥–∏ –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –∏—Å–∫–æ–≤–æ–π –¥–∞–≤–Ω–æ—Å—Ç–∏',
    timestamp: '2024-12-05 11:20',
    messageCount: 3
  }
]

const mockMessages: Message[] = [
  {
    id: '1',
    content: '–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–µ–ª–æ–º "–¢—Ä—É–¥–æ–≤–æ–π —Å–ø–æ—Ä –û–û–û –ê–ª—å—Ñ–∞". –£ –º–µ–Ω—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º –¥–µ–ª–∞. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?',
    isUser: false,
    timestamp: '2024-12-08 10:00',
  },
  {
    id: '2',
    content: '–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –ø–æ–¥–∞—á–∏ –∏—Å–∫–∞ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞ —Ä–∞–±–æ—Ç–µ?',
    isUser: true,
    timestamp: '2024-12-08 10:01',
  },
  {
    id: '3',
    content: '–ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–µ–≥–æ –¥–µ–ª–∞ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ, –¥–ª—è –ø–æ–¥–∞—á–∏ –∏—Å–∫–∞ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞ —Ä–∞–±–æ—Ç–µ –ø–æ—Ç—Ä–µ–±—É—é—Ç—Å—è:\n\n**üìÑ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –î–û–ö–£–ú–ï–ù–¢–´:**\n‚Ä¢ –¢—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä\n‚Ä¢ –ü—Ä–∏–∫–∞–∑ –æ–± —É–≤–æ–ª—å–Ω–µ–Ω–∏–∏ (–Ω–∞–π–¥–µ–Ω –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ "prikaz_ob_uvolnenii.pdf")\n‚Ä¢ –°–ø—Ä–∞–≤–∫–∞ –æ –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 –º–µ—Å—è—Ü–µ–≤\n‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ—Å—Ç—å —É–≤–æ–ª—å–Ω–µ–Ω–∏—è\n\n**‚öñÔ∏è –ü–†–ê–í–û–í–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï:**\n–°–æ–≥–ª–∞—Å–Ω–æ —Å—Ç. 394 –¢–ö –†–§, —Ä–∞–±–æ—Ç–Ω–∏–∫ –≤–ø—Ä–∞–≤–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Å—É–¥ –∑–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ç—Ä—É–¥–æ–≤–æ–≥–æ —Å–ø–æ—Ä–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞.\n\n**‚ö†Ô∏è –°–†–û–ß–ù–û:**\n–í –≤–∞—à–µ–º –¥–µ–ª–µ —Å—Ä–æ–∫ –ø–æ–¥–∞—á–∏ –∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç 15 —è–Ω–≤–∞—Ä—è 2025 –≥–æ–¥–∞!',
    isUser: false,
    timestamp: '2024-12-08 10:02',
    context: '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–µ–ª–∞ A40-123456/2024'
  }
]

const suggestedQuestions = [
  '–ù–∞–π–¥–∏ –¥–∞—Ç—É —Å—É–¥–µ–±–Ω–æ–≥–æ –∑–∞—Å–µ–¥–∞–Ω–∏—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö',
  '–ê–Ω–∞–ª–∏–∑ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤ –¥–µ–ª–∞',
  '–ö–∞–∫–∏–µ —Å—Ä–æ–∫–∏ –Ω—É–∂–Ω–æ —Å–æ–±–ª—é–¥–∞—Ç—å?',
  '–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ –ø–æ –¥–µ–ª—É?',
  '–ù–∞–π–¥–∏ —Å—É–º–º—É –∏—Å–∫–∞ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö',
  '–ü—Ä–æ–≤–µ—Ä—å –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è'
]

export default function AIChat() {
  const [messages, setMessages] = useState<Message[]>([])
  const [inputMessage, setInputMessage] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [sessionId, setSessionId] = useState<string | null>(() => 
    localStorage.getItem('chatSessionId')
  )
  const [totalTokens, setTotalTokens] = useState(0)

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ sessionId –≤ localStorage
  useEffect(() => {
    if (sessionId) {
      localStorage.setItem('chatSessionId', sessionId)
    }
  }, [sessionId])

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    const loadChatHistory = async () => {
      try {
        const url = sessionId 
          ? `/api/chat/history?sessionId=${sessionId}`
          : '/api/chat/history'
          
        const response = await fetch(url)
        
        if (response.ok) {
          const data = await response.json()
          
          if (data.messages && data.messages.length > 0) {
            const formattedMessages = data.messages.map((msg: any) => ({
              id: msg.id,
              content: msg.content,
              isUser: msg.role === 'user',
              timestamp: new Date(msg.timestamp).toLocaleString('ru-RU'),
              context: msg.role === 'assistant' ? '–û—Ç–≤–µ—Ç –æ—Ç Gemini Flash' : undefined
            }))
            setMessages(formattedMessages)
          }
          
          if (data.sessionId && data.sessionId !== sessionId) {
            setSessionId(data.sessionId)
          }
          
          setTotalTokens(data.totalTokens || 0)
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error)
      }
    }

    loadChatHistory()
  }, [sessionId])

  // –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
  const clearChatHistory = async () => {
    try {
      const response = await fetch('/api/chat/clear', {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ sessionId: sessionId }),
      })

      if (response.ok) {
        setMessages([])
        setSessionId(null)
        localStorage.removeItem('chatSessionId')
        setTotalTokens(0)
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error)
    }
  }

  const sendMessage = async () => {
    if (!inputMessage.trim()) return

    const newMessage: Message = {
      id: Date.now().toString(),
      content: inputMessage,
      isUser: true,
      timestamp: new Date().toLocaleString('ru-RU')
    }

    setMessages(prev => [...prev, newMessage])
    setInputMessage('')
    setIsLoading(true)

    try {
      // –†–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Gemini API —Å sessionId
      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          message: inputMessage.trim(),
          sessionId: sessionId
        }),
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è')
      }

      const result = await response.json()
      
      // –û–±–Ω–æ–≤–ª—è–µ–º sessionId –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
      if (result.sessionId && result.sessionId !== sessionId) {
        setSessionId(result.sessionId)
      }
      
      const aiResponse: Message = {
        id: result.message.id,
        content: result.message.content,
        isUser: false,
        timestamp: new Date(result.message.timestamp).toLocaleString('ru-RU'),
        context: `–û—Ç–≤–µ—Ç –æ—Ç Gemini 2.5 Flash ‚Ä¢ –¢–æ–∫–µ–Ω–æ–≤: ${result.totalTokens}`
      }
      
      setMessages(prev => [...prev, aiResponse])
      setTotalTokens(result.totalTokens)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —á–∞—Ç–∞:', error)
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        isUser: false,
        timestamp: new Date().toLocaleString('ru-RU'),
        context: '–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã'
      }
      setMessages(prev => [...prev, errorMessage])
    } finally {
      setIsLoading(false)
    }
  }

  const handleSuggestedQuestion = (question: string) => {
    setInputMessage(question)
  }

  return (
    <div className="p-6 h-full">
      <div className="h-full">
        {/* Main Chat Area */}
        <div className="bg-white rounded-xl shadow-sm border border-slate-200 flex flex-col h-full">
          {/* Chat Header */}
          <div className="p-6 border-b border-slate-200">
            <div className="flex items-center justify-between">
              <div>
                <h1 className="text-xl font-semibold text-slate-900">AI –ü–æ–º–æ—â–Ω–∏–∫</h1>
                <p className="text-slate-600">–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º</p>
              </div>
              <div className="flex items-center gap-2">
                <div className="flex items-center gap-2 px-3 py-1.5 bg-green-100 text-green-700 rounded-full text-sm">
                  <Brain className="w-4 h-4" />
                  Gemini Flash
                </div>
                <div className="flex items-center gap-2 px-3 py-1.5 bg-blue-100 text-blue-700 rounded-full text-sm">
                  <FileText className="w-4 h-4" />
                  –¢–æ–∫–µ–Ω–æ–≤: {totalTokens}
                </div>
                <button
                  onClick={clearChatHistory}
                  className="px-3 py-1.5 bg-red-100 hover:bg-red-200 text-red-700 rounded-full text-sm transition-colors"
                  title="–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"
                >
                  –û—á–∏—Å—Ç–∏—Ç—å
                </button>
              </div>
            </div>
          </div>

          {/* Messages */}
          <div className="flex-1 overflow-y-auto p-6 space-y-4">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex gap-4 ${message.isUser ? 'justify-end' : 'justify-start'}`}
              >
                {!message.isUser && (
                  <div className="w-8 h-8 bg-purple-500 rounded-full flex items-center justify-center flex-shrink-0">
                    <Bot className="w-4 h-4 text-white" />
                  </div>
                )}
                
                <div className={`max-w-2xl ${message.isUser ? 'order-first' : ''}`}>
                  <div
                    className={`px-4 py-3 rounded-2xl ${
                      message.isUser
                        ? 'bg-blue-600 text-white'
                        : 'bg-slate-100 text-slate-900'
                    }`}
                  >
                    <p className="whitespace-pre-wrap">{message.content}</p>
                  </div>
                  <div className="flex items-center gap-2 mt-2 text-xs text-slate-500">
                    <span>{message.timestamp}</span>
                    {message.context && (
                      <>
                        <span>‚Ä¢</span>
                        <span className="flex items-center gap-1">
                          <FileText className="w-3 h-3" />
                          {message.context}
                        </span>
                      </>
                    )}
                  </div>
                </div>

                {message.isUser && (
                  <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center flex-shrink-0">
                    <User className="w-4 h-4 text-white" />
                  </div>
                )}
              </div>
            ))}

            {isLoading && (
              <div className="flex gap-4 justify-start">
                <div className="w-8 h-8 bg-purple-500 rounded-full flex items-center justify-center flex-shrink-0">
                  <Bot className="w-4 h-4 text-white" />
                </div>
                <div className="max-w-2xl">
                  <div className="px-4 py-3 rounded-2xl bg-slate-100">
                    <div className="flex gap-2">
                      <div className="w-2 h-2 bg-slate-400 rounded-full animate-bounce"></div>
                      <div className="w-2 h-2 bg-slate-400 rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
                      <div className="w-2 h-2 bg-slate-400 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>

          {/* Suggested Questions */}
          {messages.length <= 3 && (
            <div className="px-6 py-4 border-t border-slate-200">
              <p className="text-sm text-slate-600 mb-3">–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:</p>
              <div className="grid grid-cols-2 gap-2">
                {suggestedQuestions.map((question, index) => (
                  <button
                    key={index}
                    onClick={() => handleSuggestedQuestion(question)}
                    className="flex items-center gap-2 px-3 py-2 bg-slate-50 hover:bg-slate-100 rounded-lg text-sm text-slate-700 transition-colors text-left"
                  >
                    <Zap className="w-4 h-4 text-slate-400 flex-shrink-0" />
                    {question}
                  </button>
                ))}
              </div>
            </div>
          )}

          {/* Input Area */}
          <div className="p-6 border-t border-slate-200">
            <div className="flex gap-3">
              <button className="p-2 text-slate-400 hover:text-slate-600 transition-colors">
                <Paperclip className="w-5 h-5" />
              </button>
              <div className="flex-1">
                <input
                  type="text"
                  value={inputMessage}
                  onChange={(e) => setInputMessage(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && sendMessage()}
                  placeholder="–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ –¥–µ–ª—É... (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–Ω–∞–π–¥–∏ –¥–∞—Ç—É —Å—É–¥–∞ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö')"
                  className="w-full px-4 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>
              <button
                onClick={sendMessage}
                disabled={!inputMessage.trim() || isLoading}
                className="p-2 bg-blue-600 hover:bg-blue-700 disabled:bg-slate-300 text-white rounded-lg transition-colors"
              >
                <Send className="w-5 h-5" />
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}