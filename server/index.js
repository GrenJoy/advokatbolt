import express from 'express'
import cors from 'cors'
import multer from 'multer'
import { GoogleGenerativeAI } from '@google/generative-ai'

const app = express()
const port = process.env.PORT || 3001

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
app.use(cors({
  origin: process.env.NODE_ENV === 'production' 
    ? process.env.FRONTEND_URL 
    : ['http://localhost:5000', 'http://localhost:5173', 'http://localhost:3000']
}))

app.use(express.json())

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
const upload = multer({
  storage: multer.memoryStorage(),
  limits: {
    fileSize: 10 * 1024 * 1024 // 10MB
  },
  fileFilter: (req, file, cb) => {
    // –†–∞–∑—Ä–µ—à–∏—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ PDF
    if (file.mimetype.startsWith('image/') || file.mimetype === 'application/pdf') {
      cb(null, true)
    } else {
      cb(new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞'), false)
    }
  }
})

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini API
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY)

const ocrModel = genAI.getGenerativeModel({ 
  model: 'gemini-2.0-flash-exp',
  generationConfig: {
    temperature: 0.1,
    topP: 0.8,
    topK: 40,
    maxOutputTokens: 8192,
  }
})

const chatModel = genAI.getGenerativeModel({ 
  model: 'gemini-1.5-flash',
  generationConfig: {
    temperature: 0.7,
    topP: 0.9,
    topK: 40,
    maxOutputTokens: 2048,
  }
})

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –≤ base64
function fileToBase64(buffer) {
  return buffer.toString('base64')
}

// API —Ä–æ—É—Ç –¥–ª—è OCR –æ–±—Ä–∞–±–æ—Ç–∫–∏
app.post('/api/ocr', upload.single('document'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: '–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω' })
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ base64
    const base64Data = fileToBase64(req.file.buffer)
    
    const prompt = `
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –∏ –∏–∑–≤–ª–µ–∫–∏—Ç–µ —Ç–µ–∫—Å—Ç. –í–µ—Ä–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:

{
  "extractedText": "–ø–æ–ª–Ω—ã–π –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞",
  "documentType": "—Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–¥–æ–≥–æ–≤–æ—Ä, —Ä–µ—à–µ–Ω–∏–µ —Å—É–¥–∞, –∏—Å–∫, —Å–ø—Ä–∞–≤–∫–∞ –∏ —Ç.–¥.)",
  "confidence": –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –æ—Ç 0 –¥–æ 1,
  "summary": "–∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)",
  "keyEntities": ["–∫–ª—é—á–µ–≤—ã–µ –ª–∏—Ü–∞, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –¥–∞—Ç—ã, —Å—É–º–º—ã"],
  "legalCategory": "–∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–∞–≤–æ–≤–æ–π –æ–±–ª–∞—Å—Ç–∏ (–≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–µ, —É–≥–æ–ª–æ–≤–Ω–æ–µ, —Ç—Ä—É–¥–æ–≤–æ–µ, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ)"
}

–ï—Å–ª–∏ —ç—Ç–æ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç, –æ–±—Ä–∞—Ç–∏—Ç–µ –æ—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞:
- –ù–æ–º–µ—Ä–∞ –¥–µ–ª –∏ –∏–Ω—Å—Ç–∞–Ω—Ü–∏–∏
- –î–∞—Ç—ã –∏ —Å—Ä–æ–∫–∏
- –°—Ç–æ—Ä–æ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–∞
- –°—É–º–º—ã –∏ —à—Ç—Ä–∞—Ñ—ã
- –ü—Ä–∞–≤–æ–≤—ã–µ –æ—Å–Ω–æ–≤–∞–Ω–∏—è
`

    const result = await ocrModel.generateContent([
      prompt,
      {
        inlineData: {
          data: base64Data,
          mimeType: req.file.mimetype
        }
      }
    ])

    const response = await result.response
    const text = response.text()
    
    // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
    try {
      const jsonMatch = text.match(/\{[\s\S]*\}/)
      if (jsonMatch) {
        const ocrResult = JSON.parse(jsonMatch[0])
        res.json({
          success: true,
          data: {
            extractedText: ocrResult.extractedText || '',
            documentType: ocrResult.documentType || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç',
            confidence: ocrResult.confidence || 0.8,
            summary: ocrResult.summary || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑—é–º–µ',
            keyEntities: ocrResult.keyEntities || [],
            legalCategory: ocrResult.legalCategory || undefined
          }
        })
        return
      }
    } catch (parseError) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç –æ—Ç Gemini:', parseError)
    }

    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    res.json({
      success: true,
      data: {
        extractedText: text,
        documentType: '–î–æ–∫—É–º–µ–Ω—Ç',
        confidence: 0.7,
        summary: '–¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Å—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑',
        keyEntities: [],
        legalCategory: undefined
      }
    })

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error)
    res.status(500).json({ 
      success: false, 
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.' 
    })
  }
})

// API —Ä–æ—É—Ç –¥–ª—è AI —á–∞—Ç–∞
app.post('/api/chat', async (req, res) => {
  try {
    const { message, context } = req.body

    if (!message) {
      return res.status(400).json({ error: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' })
    }

    let prompt = message
    
    if (context) {
      prompt = `–ö–æ–Ω—Ç–µ–∫—Å—Ç: ${context}\n\n–í–æ–ø—Ä–æ—Å: ${message}\n\n–û—Ç–≤–µ—Ç—å—Ç–µ –∫–∞–∫ –æ–ø—ã—Ç–Ω—ã–π —Ä–æ—Å—Å–∏–π—Å–∫–∏–π —é—Ä–∏—Å—Ç, —É—á–∏—Ç—ã–≤–∞—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ.`
    }

    const result = await chatModel.generateContent(prompt)
    const response = await result.response
    const aiResponse = response.text()

    res.json({
      success: true,
      response: aiResponse
    })

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI:', error)
    res.status(500).json({ 
      success: false, 
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' 
    })
  }
})

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API
app.get('/api/health', (req, res) => {
  res.json({ 
    status: 'ok', 
    timestamp: new Date().toISOString(),
    geminiConfigured: !!process.env.GEMINI_API_KEY
  })
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ multer
app.use((error, req, res, next) => {
  if (error instanceof multer.MulterError) {
    if (error.code === 'LIMIT_FILE_SIZE') {
      return res.status(400).json({ error: '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB' })
    }
  }
  
  if (error.message === '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞') {
    return res.status(400).json({ error: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ PDF' })
  }

  console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error)
  res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
})

app.listen(port, () => {
  console.log(`üöÄ OCR API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`)
  console.log(`üìä Health check: http://localhost:${port}/api/health`)
  if (!process.env.GEMINI_API_KEY) {
    console.warn('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: GEMINI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')
  }
})